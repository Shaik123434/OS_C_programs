#include <stdio.h>

#define MAX_PROCESSES 5
#define MAX_RESOURCES 3

int available[MAX_RESOURCES];
int maximum[MAX_PROCESSES][MAX_RESOURCES];
int allocation[MAX_PROCESSES][MAX_RESOURCES];
int need[MAX_PROCESSES][MAX_RESOURCES];

// Function to check if the requested resources can be granted to a process
int isSafe(int process, int request[]) {
    // Check if the requested resources are less than or equal to the available resources
    for (int i = 0; i < MAX_RESOURCES; ++i) {
        if (request[i] > need[process][i] || request[i] > available[i]) {
            return 0;
        }
    }

    // Simulate resource allocation
    for (int i = 0; i < MAX_RESOURCES; ++i) {
        available[i] -= request[i];
        allocation[process][i] += request[i];
        need[process][i] -= request[i];
    }

    // Check if the system is in a safe state
    int finish[MAX_PROCESSES] = {0};
    int work[MAX_RESOURCES];
    for (int i = 0; i < MAX_RESOURCES; ++i) {
        work[i] = available[i];
    }

    int count = 0;
    while (count < MAX_PROCESSES) {
        int found = 0;
        for (int i = 0; i < MAX_PROCESSES; ++i) {
            if (!finish[i]) {
                int j;
                for (j = 0; j < MAX_RESOURCES; ++j) {
                    if (need[i][j] > work[j]) {
                        break;
                    }
                }
                if (j == MAX_RESOURCES) {
                    // Process i can finish
                    for (int k = 0; k < MAX_RESOURCES; ++k) {
                        work[k] += allocation[i][k];
                    }
                    finish[i] = 1;
                    found = 1;
                    count++;
                }
            }
        }
        if (!found) {
            // No process can finish, the system is not in a safe state
            // Roll back changes and return 0
            for (int i = 0; i < MAX_RESOURCES; ++i) {
                available[i] += request[i];
                allocation[process][i] -= request[i];
                need[process][i] += request[i];
            }
            return 0;
        }
    }

    // All processes can finish, the system is in a safe state
    return 1;
}

// Function to simulate resource request and release
void simulate() {
    int process, request[MAX_RESOURCES];

    printf("Enter process number (0 to %d): ", MAX_PROCESSES - 1);
    scanf("%d", &process);

    printf("Enter resource request (up to %d resources):\n", MAX_RESOURCES);
    for (int i = 0; i < MAX_RESOURCES; ++i) {
        scanf("%d", &request[i]);
    }

    if (isSafe(process, request)) {
        printf("Resource request granted. System in safe state.\n");
    } else {
        printf("Resource request denied. System in unsafe state.\n");
    }

    // Simulate resource release
    printf("Simulating resource release...\n");
    printf("Enter released resources (up to %d resources):\n", MAX_RESOURCES);
    for (int i = 0; i < MAX_RESOURCES; ++i) {
        int release;
        scanf("%d", &release);
        available[i] += release;
        allocation[process][i] -= release;
        need[process][i] += release;
    }
}

// Function to initialize the system state
void initialize() {
    printf("Enter available resources (up to %d resources):\n", MAX_RESOURCES);
    for (int i = 0; i < MAX_RESOURCES; ++i) {
        scanf("%d", &available[i]);
    }

    printf("Enter maximum demand for each process:\n");
    for (int i = 0; i < MAX_PROCESSES; ++i) {
        printf("Process %d: ", i);
        for (int j = 0; j < MAX_RESOURCES; ++j) {
            scanf("%d", &maximum[i][j]);
            allocation[i][j] = 0;
            need[i][j] = maximum[i][j];
        }
    }
}

// Function to display the current state of the system
void displayState() {
    printf("\nCurrent State:\n");

    printf("Available resources: ");
    for (int i = 0; i < MAX_RESOURCES; ++i) {
        printf("%d ", available[i]);
    }
    printf("\n");

    printf("Maximum demand:\n");
    for (int i = 0; i < MAX_PROCESSES; ++i) {
        printf("Process %d: ", i);
        for (int j = 0; j < MAX_RESOURCES; ++j) {
            printf("%d ", maximum[i][j]);
        }
        printf("\n");
    }

    printf("Allocated resources:\n");
    for (int i = 0; i < MAX_PROCESSES; ++i) {
        printf("Process %d: ", i);
        for (int j = 0; j < MAX_RESOURCES; ++j) {
            printf("%d ", allocation[i][j]);
        }
        printf("\n");
    }

    printf("Needed resources:\n");
    for (int i = 0; i < MAX_PROCESSES; ++i) {
        printf("Process %d: ", i);
        for (int j = 0; j < MAX_RESOURCES; ++j) {
            printf("%d ", need[i][j]);
        }
        printf("\n");
    }
}

int main() {
    initialize();

    while (1) {
        displayState();
        simulate();

        printf("Do you want to continue simulation? (1 for Yes, 0 for No): ");
        int choice;
        scanf("%d", &choice);

        if (choice != 1) {
            break;
        }
    }

    return 0;
}
