#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <mqueue.h>

#define QUEUE_NAME "/my_message_queue"
#define MAX_MSG_SIZE 256

int main() {
    mqd_t mq;
    struct mq_attr attr;
    char buffer[MAX_MSG_SIZE];

    // Set up attributes for the message queue
    attr.mq_flags = 0;
    attr.mq_maxmsg = 10;
    attr.mq_msgsize = MAX_MSG_SIZE;
    attr.mq_curmsgs = 0;

    // Create a message queue
    mq = mq_open(QUEUE_NAME, O_CREAT | O_RDWR, 0666, &attr);
    if (mq == (mqd_t)-1) {
        perror("mq_open");
        exit(1);
    }

    // Fork a child process
    pid_t pid = fork();

    if (pid < 0) {
        perror("fork");
        exit(1);
    } else if (pid == 0) { // Child process
        printf("Child process sending message...\n");
        const char *message = "Hello from child!";
        if (mq_send(mq, message, strlen(message), 0) == -1) {
            perror("mq_send");
            exit(1);
        }
        exit(0);
    } else { // Parent process
        // Wait for the child to finish sending the message
        wait(NULL);

        // Receive the message from the message queue
        ssize_t received_size = mq_receive(mq, buffer, MAX_MSG_SIZE, NULL);
        if (received_size == -1) {
            perror("mq_receive");
            exit(1);
        }

        // Null-terminate the received message
        buffer[received_size] = '\0';

        printf("Parent process received message: %s\n", buffer);

        // Close and unlink the message queue
        mq_close(mq);
        mq_unlink(QUEUE_NAME);
    }

    return 0;
}
