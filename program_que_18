#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define BUFFER_SIZE 5
#define NUM_PRODUCERS 2
#define NUM_CONSUMERS 2

int buffer[BUFFER_SIZE];
int in = 0, out = 0;

sem_t empty, full, mutex;

void* producer(void* arg) {
    int item;
    for (int i = 0; i < BUFFER_SIZE * 2; ++i) {
        item = rand() % 100; // Produce a random item

        sem_wait(&empty); // Wait if the buffer is full
        sem_wait(&mutex); // Wait for exclusive access to the buffer

        buffer[in] = item;
        in = (in + 1) % BUFFER_SIZE;

        printf("Produced: %d\n", item);

        sem_post(&mutex); // Release access to the buffer
        sem_post(&full);  // Signal that the buffer is no longer empty

        sleep(1); // Simulate some work before producing the next item
    }

    pthread_exit(NULL);
}

void* consumer(void* arg) {
    int item;
    for (int i = 0; i < BUFFER_SIZE * 2; ++i) {
        sem_wait(&full);  // Wait if the buffer is empty
        sem_wait(&mutex); // Wait for exclusive access to the buffer

        item = buffer[out];
        out = (out + 1) % BUFFER_SIZE;

        printf("Consumed: %d\n", item);

        sem_post(&mutex); // Release access to the buffer
        sem_post(&empty); // Signal that the buffer is no longer full

        sleep(2); // Simulate some work before consuming the next item
    }

    pthread_exit(NULL);
}

int main() {
    pthread_t producers[NUM_PRODUCERS];
    pthread_t consumers[NUM_CONSUMERS];

    sem_init(&empty, 0, BUFFER_SIZE); // Initialize empty semaphore to buffer size
    sem_init(&full, 0, 0);            // Initialize full semaphore to 0
    sem_init(&mutex, 0, 1);           // Initialize mutex semaphore to 1

    for (int i = 0; i < NUM_PRODUCERS; ++i) {
        pthread_create(&producers[i], NULL, producer, NULL);
    }

    for (int i = 0; i < NUM_CONSUMERS; ++i) {
        pthread_create(&consumers[i], NULL, consumer, NULL);
    }

    for (int i = 0; i < NUM_PRODUCERS; ++i) {
        pthread_join(producers[i], NULL);
    }

    for (int i = 0; i < NUM_CONSUMERS; ++i) {
        pthread_join(consumers[i], NULL);
    }

    sem_destroy(&empty);
    sem_destroy(&full);
    sem_destroy(&mutex);

    return 0;
}
