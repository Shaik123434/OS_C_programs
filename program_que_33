#include <stdio.h>
#include <limits.h>

#define MAX_PAGES 3

// Function to find the index of the page with the farthest next use
int findFarthestNextUse(int pageReferences[], int pageTable[], int numFrames, int currentIndex) {
    int farthestIndex = -1;
    int farthestNextUse = INT_MIN;

    for (int i = 0; i < numFrames; ++i) {
        int nextPageIndex = currentIndex + 1;
        while (nextPageIndex < numFrames && pageReferences[nextPageIndex] != pageTable[i]) {
            nextPageIndex++;
        }

        if (nextPageIndex > farthestNextUse) {
            farthestNextUse = nextPageIndex;
            farthestIndex = i;
        }
    }

    return farthestIndex;
}

// Function to check if a page is present in the page table
int isPagePresent(int page, int pageTable[], int numFrames) {
    for (int i = 0; i < numFrames; ++i) {
        if (pageTable[i] == page) {
            return 1; // Page is present
        }
    }
    return 0; // Page is not present
}

// Function to display the contents of the page table
void displayPageTable(int pageTable[], int numFrames) {
    printf("Page Table: ");
    for (int i = 0; i < numFrames; ++i) {
        printf("%d ", pageTable[i]);
    }
    printf("\n");
}

int main() {
    int pageReferences[] = {0, 1, 2, 3, 0, 1, 4, 0, 1, 2};
    int numReferences = sizeof(pageReferences) / sizeof(pageReferences[0]);
    int pageTable[MAX_PAGES] = {-1, -1, -1}; // Initialize page table with invalid values
    int pageFaults = 0;

    for (int i = 0; i < numReferences; ++i) {
        int currentPage = pageReferences[i];

        // Check if the page is already present in the page table
        if (!isPagePresent(currentPage, pageTable, MAX_PAGES)) {
            // Page Fault: Replace the page with the farthest next use
            int replacementIndex = findFarthestNextUse(pageReferences, pageTable, MAX_PAGES, i);
            pageTable[replacementIndex] = currentPage;
            pageFaults++;

            // Display the page table after a page fault
            displayPageTable(pageTable, MAX_PAGES);
        }
    }

    printf("Total Page Faults: %d\n", pageFaults);

    return 0;
}
