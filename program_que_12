#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

#define NUM_PHILOSOPHERS 5
#define THINKING 0
#define HUNGRY 1
#define EATING 2

pthread_mutex_t mutex;
pthread_cond_t cond[NUM_PHILOSOPHERS];
int state[NUM_PHILOSOPHERS];

void grab_forks(int philosopher_id) {
    pthread_mutex_lock(&mutex);
    state[philosopher_id] = HUNGRY;
    printf("Philosopher %d is hungry\n", philosopher_id + 1);
    test(philosopher_id);
    pthread_mutex_unlock(&mutex);
    pthread_mutex_lock(&mutex);
    if (state[philosopher_id] != EATING) {
        pthread_cond_wait(&cond[philosopher_id], &mutex);
    }
    pthread_mutex_unlock(&mutex);
}

void put_forks(int philosopher_id) {
    pthread_mutex_lock(&mutex);
    state[philosopher_id] = THINKING;
    printf("Philosopher %d is thinking\n", philosopher_id + 1);
    test((philosopher_id + NUM_PHILOSOPHERS - 1) % NUM_PHILOSOPHERS);
    test((philosopher_id + 1) % NUM_PHILOSOPHERS);
    pthread_mutex_unlock(&mutex);
}

void test(int philosopher_id) {
    if (state[philosopher_id] == HUNGRY &&
        state[(philosopher_id + NUM_PHILOSOPHERS - 1) % NUM_PHILOSOPHERS] != EATING &&
        state[(philosopher_id + 1) % NUM_PHILOSOPHERS] != EATING) {
        state[philosopher_id] = EATING;
        printf("Philosopher %d is eating\n", philosopher_id + 1);
        pthread_cond_signal(&cond[philosopher_id]);
    }
}

void* philosopher(void* arg) {
    int philosopher_id = *(int*)arg;

    while (1) {
        // Philosopher is thinking
        printf("Philosopher %d is thinking\n", philosopher_id + 1);
        sleep(rand() % 3 + 1);

        // Philosopher is hungry
        grab_forks(philosopher_id);

        // Philosopher is eating
        sleep(rand() % 3 + 1);

        // Philosopher is done eating
        put_forks(philosopher_id);
    }
}

int main() {
    pthread_t philosophers[NUM_PHILOSOPHERS];
    int philosopher_ids[NUM_PHILOSOPHERS];

    pthread_mutex_init(&mutex, NULL);

    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_cond_init(&cond[i], NULL);
        philosopher_ids[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, &philosopher_ids[i]);
    }

    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(philosophers[i], NULL);
        pthread_cond_destroy(&cond[i]);
    }

    pthread_mutex_destroy(&mutex);

    return 0;
}
