#include <stdio.h>
#include <stdlib.h>

#define MEMORY_SIZE 1000

typedef struct Block {
    int size;
    int allocated;
} Block;

Block memory[MEMORY_SIZE];

void initializeMemory() {
    memory[0].size = MEMORY_SIZE;
    memory[0].allocated = 0;
}

void firstFit(int size) {
    int firstFitIndex = -1;

    for (int i = 0; i < MEMORY_SIZE; ++i) {
        if (!memory[i].allocated && memory[i].size >= size) {
            firstFitIndex = i;
            break;
        }
    }

    if (firstFitIndex != -1) {
        // Allocate memory
        memory[firstFitIndex].allocated = 1;

        // Split the block if it's larger than needed
        if (memory[firstFitIndex].size > size) {
            int newIndex = firstFitIndex + 1;
            while (memory[newIndex].allocated) {
                newIndex++;
            }

            memory[newIndex].size = memory[firstFitIndex].size - size;
            memory[newIndex].allocated = 0;

            memory[firstFitIndex].size = size;
        }

        printf("Memory allocated successfully.\n");
    } else {
        printf("Error: Unable to allocate memory of size %d using first fit.\n", size);
    }
}

void deallocate(int index) {
    if (memory[index].allocated) {
        memory[index].allocated = 0;

        // Merge consecutive free blocks
        for (int i = 0; i < MEMORY_SIZE - 1; ++i) {
            if (!memory[i].allocated && !memory[i + 1].allocated) {
                memory[i].size += memory[i + 1].size;
                memory[i + 1].size = 0;
                memory[i + 1].allocated = 0;
            }
        }

        printf("Memory deallocated successfully.\n");
    } else {
        printf("Error: Block at index %d is not allocated.\n", index);
    }
}

void displayMemory() {
    printf("Memory Status:\n");
    for (int i = 0; i < MEMORY_SIZE; ++i) {
        printf("%d. Size=%d, Allocated=%s\n", i, memory[i].size, memory[i].allocated ? "Yes" : "No");
    }
    printf("----------------------\n");
}

int main() {
    initializeMemory();

    // Allocate memory using first fit
    firstFit(200);
    firstFit(300);
    displayMemory();

    // Deallocate and display
    deallocate(0);
    deallocate(2);
    displayMemory();

    return 0;
}
