#include <stdio.h>

// Structure to represent a process
struct Process {
    int processID;
    int arrivalTime;
    int burstTime;
    int priority;
    int completionTime;
};

// Function to perform Priority Scheduling
void Priority_Schedule(struct Process processes[], int n) {
    int currentTime = 0;

    // Traverse through each process
    for (int i = 0; i < n; i++) {
        int highestPriorityIndex = -1;
        int highestPriority = -1; // Initialize with a low value

        // Find the process with the highest priority that has arrived
        for (int j = 0; j < n; j++) {
            if (processes[j].arrivalTime <= currentTime && processes[j].priority > highestPriority) {
                highestPriority = processes[j].priority;
                highestPriorityIndex = j;
            }
        }

        // If a process with the highest priority is found, update completion time and current time
        if (highestPriorityIndex != -1) {
            processes[highestPriorityIndex].completionTime = currentTime + processes[highestPriorityIndex].burstTime;
            currentTime = processes[highestPriorityIndex].completionTime;
        } else {
            // If no process has arrived, wait for the next process
            currentTime++;
        }
    }
}

// Function to display the schedule and average turnaround time
void displaySchedule(struct Process processes[], int n) {
    float totalTurnaroundTime = 0.0;

    printf("\nProcess\t Arrival Time\t Burst Time\t Priority\t Completion Time\t Turnaround Time\n");

    for (int i = 0; i < n; i++) {
        int turnaroundTime = processes[i].completionTime - processes[i].arrivalTime;
        totalTurnaroundTime += turnaroundTime;

        printf("%d\t %d\t\t %d\t\t %d\t\t %d\t\t\t %d\n", processes[i].processID, processes[i].arrivalTime,
               processes[i].burstTime, processes[i].priority, processes[i].completionTime, turnaroundTime);
    }

    float averageTurnaroundTime = totalTurnaroundTime / n;
    printf("\nAverage Turnaround Time: %.2f\n", averageTurnaroundTime);
}

int main() {
    int n;

    // Input number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Array to store information about each process
    struct Process processes[n];

    // Input details for each process
    for (int i = 0; i < n; i++) {
        processes[i].processID = i + 1;
        printf("Enter Arrival Time for Process %d: ", processes[i].processID);
        scanf("%d", &processes[i].arrivalTime);
        printf("Enter Burst Time for Process %d: ", processes[i].processID);
        scanf("%d", &processes[i].burstTime);
        printf("Enter Priority for Process %d: ", processes[i].processID);
        scanf("%d", &processes[i].priority);
    }

    // Perform Priority Scheduling
    Priority_Schedule(processes, n);

    // Display the schedule and average turnaround time
    displaySchedule(processes, n);

    return 0;
}
