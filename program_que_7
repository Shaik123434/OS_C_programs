#include <stdio.h>

// Structure to represent a process
struct Process {
    int id;
    int burst_time;
};

// Function to perform sorting based on burst time using Selection Sort
void sortProcesses(struct Process processes[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (processes[i].burst_time > processes[j].burst_time) {
                // Swap processes[i] and processes[j]
                struct Process temp = processes[i];
                processes[i] = processes[j];
                processes[j] = temp;
            }
        }
    }
}

// Function to calculate waiting time and turnaround time
void calculateTimes(struct Process processes[], int n, int waiting_time[], int turnaround_time[]) {
    waiting_time[0] = 0; // The first process has 0 waiting time

    // Calculate waiting time for each process
    for (int i = 1; i < n; i++) {
        waiting_time[i] = waiting_time[i - 1] + processes[i - 1].burst_time;
    }

    // Calculate turnaround time for each process
    for (int i = 0; i < n; i++) {
        turnaround_time[i] = waiting_time[i] + processes[i].burst_time;
    }
}

// Function to calculate average waiting time and average turnaround time
void calculateAverages(int waiting_time[], int turnaround_time[], int n) {
    float avg_waiting_time = 0, avg_turnaround_time = 0;

    for (int i = 0; i < n; i++) {
        avg_waiting_time += waiting_time[i];
        avg_turnaround_time += turnaround_time[i];
    }

    avg_waiting_time /= n;
    avg_turnaround_time /= n;

    printf("Average Waiting Time: %.2f\n", avg_waiting_time);
    printf("Average Turnaround Time: %.2f\n", avg_turnaround_time);
}

// Function to display the schedule and times
void displaySchedule(struct Process processes[], int waiting_time[], int turnaround_time[], int n) {
    printf("Process\tBurst Time\tWaiting Time\tTurnaround Time\n");

    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].burst_time, waiting_time[i], turnaround_time[i]);
    }
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];
    int waiting_time[n], turnaround_time[n];

    // Input burst times for each process
    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter the burst time for Process %d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
    }

    // Sort processes based on burst time
    sortProcesses(processes, n);

    // Calculate waiting time and turnaround time
    calculateTimes(processes, n, waiting_time, turnaround_time);

    // Display the schedule and times
    displaySchedule(processes, waiting_time, turnaround_time, n);

    // Calculate and display average times
    calculateAverages(waiting_time, turnaround_time, n);

    return 0;
}
